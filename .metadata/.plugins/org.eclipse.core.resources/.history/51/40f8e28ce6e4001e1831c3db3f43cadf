package com.peisia.controller;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.URL;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.HashMap;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.client.RestTemplate;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import com.peisia.service.FcService;
import com.peisia.spring.dto.fc.FcUser;

import lombok.AllArgsConstructor;
import lombok.extern.log4j.Log4j;

@Controller
@RequestMapping("/fconline/*")
@AllArgsConstructor
public class FcController{
	
	private final FcService fcService;
	
	@GetMapping("/fc")
	public void fcOnline() {

	}
	
	@PostMapping("/fc")
	public void fcOnline(Model model, String word,HttpServletRequest request) {
		try {
			fcService.user(model, word, request);
		} catch(Exception e) {
			System.out.println(e);
		}
	}
	
	@RequestMapping(value="/match", method=RequestMethod.GET)
	public void match() {
		
	}
	
	@RequestMapping(value="/match", method=RequestMethod.POST)
	public String match(Model model, String word,HttpServletRequest request) {
		try {	        
			fcService.match(model, word, request);
		} catch (Exception exception) {
		    System.out.println(exception);
		}
		return "/fconline/match";
	}
	
	@RequestMapping(value="/matchDetail", method=RequestMethod.GET)
	public String matchDetail(@RequestParam("jsonData") String jsonData,
			@RequestParam("word")String word, Model model,HttpServletRequest request) {
		try {
		    String urlString = "https://open.api.nexon.com/fconline/v1/match-detail?matchid=" + jsonData;
		    URL url = new URL(urlString);
		    
		    // HTTP connection 설정
		    HttpURLConnection connection = (HttpURLConnection) url.openConnection();
		    connection.setRequestMethod("GET");
		    connection.setRequestProperty("x-nxopen-api-key", API_KEY);

		    int responseCode = connection.getResponseCode();

		    BufferedReader in;
		    if (responseCode == 200) {
		        // responseCode 200 정상응답
		        in = new BufferedReader(new InputStreamReader(connection.getInputStream()));
		    } else {
		        // responseCode 200 이외의 코드가 반환되었을 경우
		        in = new BufferedReader(new InputStreamReader(connection.getErrorStream()));
		    }

		    String inputLine;
		    StringBuffer response = new StringBuffer();
		    while ((inputLine = in.readLine()) != null) {
		        response.append(inputLine);
		    }
		    in.close();
		    
		    String characterName1 = URLEncoder.encode(word, StandardCharsets.UTF_8);
		    String urlString1 = "https://open.api.nexon.com/fconline/v1/id?nickname=" + characterName1;
		    URL url1 = new URL(urlString1);

		    HttpURLConnection connection1 = (HttpURLConnection) url1.openConnection();
		    connection1.setRequestMethod("GET");
		    connection1.setRequestProperty("x-nxopen-api-key", API_KEY);

		    int responseCode1 = connection1.getResponseCode();
		        
		    BufferedReader in1;
		    if (responseCode1 == 200) {
		        in1 = new BufferedReader(new InputStreamReader(connection1.getInputStream()));
		    } else {
		        in1 = new BufferedReader(new InputStreamReader(connection1.getErrorStream()));
		    }

		    String inputLine1;
		    StringBuffer response1 = new StringBuffer();
		    while ((inputLine1 = in1.readLine()) != null) {
		        response1.append(inputLine1);
		    }
		        
		    in1.close();
		    System.out.println(response1.toString());
		        
		    // 첫 번째 API 응답을 파싱하여 필요한 데이터 추출
		    String dataFromFirstApi = parseFirstApiResponse(response1.toString());
		    model.addAttribute("ouid", dataFromFirstApi);
		        
		    String characterName2 = URLEncoder.encode(dataFromFirstApi, StandardCharsets.UTF_8);

		    String urlString2 = "https://open.api.nexon.com/fconline/v1/user/basic?ouid=" + characterName2;
		    URL url2 = new URL(urlString2);

		    HttpURLConnection connection2 = (HttpURLConnection) url2.openConnection();
		    connection2.setRequestMethod("GET");
		    connection2.setRequestProperty("x-nxopen-api-key", API_KEY);

		    int responseCode2 = connection2.getResponseCode();
		            
		    BufferedReader in2;
		    if (responseCode2 == 200) {
		        in2 = new BufferedReader(new InputStreamReader(connection2.getInputStream()));
		    } else {
		        in2 = new BufferedReader(new InputStreamReader(connection2.getErrorStream()));
		    }

		    String inputLine2;
		    StringBuffer response2 = new StringBuffer();
		    while ((inputLine2 = in2.readLine()) != null) {
		        response2.append(inputLine2);
		    }
		    in2.close();
		        
		    Gson gson1 = new Gson();
		    JsonObject jsonObject1 = gson1.fromJson(response2.toString(), JsonObject.class);
		    int characterLevel = jsonObject1.get("level").getAsInt();
		    String serverName = jsonObject1.get("nickname").getAsString();

		    model.addAttribute("characterLevel", characterLevel);
		    model.addAttribute("serverName", serverName);

	        model.addAttribute("ouid", dataFromFirstApi);
	        model.addAttribute("characterLevel", characterLevel);
	        model.addAttribute("serverName", serverName);
	        model.addAttribute("matches", response.toString());
	        
		    model.addAttribute("tests", response.toString());

		    System.out.println(response.toString());
		} catch (Exception e) {
		    System.out.println(e);
		}
		return "/fconline/matchDetail";
	}
	
	@RequestMapping(value="/user", method=RequestMethod.GET)
	public void user() {
		
	}
	
	
	private static String parseFirstApiResponse(String response) {
	    // JSON 형식의 응답을 파싱하여 필요한 데이터를 추출
	    JsonObject jsonObject = JsonParser.parseString(response).getAsJsonObject();
	    String data = jsonObject.get("ouid").getAsString();
	    return data;
	}
}
