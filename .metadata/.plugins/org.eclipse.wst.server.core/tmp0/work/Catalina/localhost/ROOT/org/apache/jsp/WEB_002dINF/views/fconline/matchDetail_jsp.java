/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.80
 * Generated at: 2024-03-11 07:25:51 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.fconline;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class matchDetail_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<link rel=\"stylesheet\" href=\"/resources/cham.css\" >\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>전적상세확인</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	<div class=\"title-box\">\r\n");
      out.write("	    피파 \r\n");
      out.write("	</div>\r\n");
      out.write("	<hr>\r\n");
      out.write("    <h1>경기 결과</h1>\r\n");
      out.write("    <hr>\r\n");
      out.write("	");

		String previousPage = (String) session.getAttribute("previousPage");
	
      out.write("\r\n");
      out.write("    <a href=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${sessionScope.previousPage}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\">이전화면으로 가기</a>\r\n");
      out.write("    <hr>\r\n");
      out.write("    \r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("    ");
 String jsonData = (String) request.getAttribute("tests"); 
      out.write("\r\n");
      out.write("    ");
 com.google.gson.JsonParser parser = new com.google.gson.JsonParser(); 
      out.write("\r\n");
      out.write("    ");
 com.google.gson.JsonObject jsonObject = parser.parse(jsonData).getAsJsonObject(); 
      out.write("\r\n");
      out.write("    \r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("    ");
 com.google.gson.JsonArray matchInfoArray = jsonObject.getAsJsonArray("matchInfo"); 
      out.write("\r\n");
      out.write("    ");
 for (com.google.gson.JsonElement matchInfoElement : matchInfoArray) { 
      out.write("\r\n");
      out.write("        ");
 com.google.gson.JsonObject matchInfoObject = matchInfoElement.getAsJsonObject(); 
      out.write("\r\n");
      out.write("        \r\n");
      out.write("        ");
      out.write("\r\n");
      out.write("        ");
 String ouid = matchInfoObject.get("ouid").getAsString(); 
      out.write("\r\n");
      out.write("        ");
 String nickname = matchInfoObject.get("nickname").getAsString(); 
      out.write("\r\n");
      out.write("        ");
 String matchResult = matchInfoObject.getAsJsonObject("matchDetail").get("matchResult").getAsString(); 
      out.write("\r\n");
      out.write("        ");
 int possession = matchInfoObject.getAsJsonObject("matchDetail").get("possession").getAsInt(); 
      out.write("\r\n");
      out.write("        ");
 int shootTotal = matchInfoObject.getAsJsonObject("shoot").get("shootTotal").getAsInt(); 
      out.write("\r\n");
      out.write("        ");
 int effectiveShootTotal = matchInfoObject.getAsJsonObject("shoot").get("effectiveShootTotal").getAsInt(); 
      out.write("\r\n");
      out.write("        ");
 int goalTotal = matchInfoObject.getAsJsonObject("shoot").get("goalTotal").getAsInt(); 
      out.write("\r\n");
      out.write("        \r\n");
      out.write("        ");
      out.write("\r\n");
      out.write("        <div>\r\n");
      out.write("            <p>유저: ");
      out.print( nickname );
      out.write("</p>\r\n");
      out.write("            <p>경기결과: ");
      out.print( matchResult );
      out.write("</p>\r\n");
      out.write("            <p>점유율: ");
      out.print( possession );
      out.write("</p>\r\n");
      out.write("            <p>총 슈팅수: ");
      out.print( shootTotal );
      out.write("</p>\r\n");
      out.write("            <p>유효 슈팅수: ");
      out.print( effectiveShootTotal );
      out.write("</p>\r\n");
      out.write("            <p>총 골수: ");
      out.print( goalTotal );
      out.write("</p>\r\n");
      out.write("            <hr>\r\n");
      out.write("        </div>\r\n");
      out.write("    ");
 } 
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
